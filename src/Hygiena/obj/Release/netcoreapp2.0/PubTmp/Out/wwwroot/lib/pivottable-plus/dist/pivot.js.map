{"version":3,"sources":["pivot.coffee"],"names":[],"mappings":"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","file":"pivot.js","sourceRoot":"/source/","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n        \ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults = \n            digitsAfterDecimal: 2, scaler: 1, \n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend defaults, opts\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.length\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.join sep\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        movingSum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> \n                colKeys = data.getColKeys()\n                counter = 0\n                flat_col_key = colKey.join(String.fromCharCode(0))\n                for own j, item of colKeys\n                    flat_item = item.join(String.fromCharCode(0))\n                    itter = counter if flat_item == flat_col_key\n                    counter++\n                prev_value = 0\n                if itter > 0 \n                    i = k = 1\n                    ref = itter + 1\n                    i = k = 1\n                    ref = itter + 1\n                    `for (i = k = 1, ref = itter + 1; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {\n                        aggregator = data.getAggregator(rowKey, colKeys[itter - i]);\n                        if ('sum' in aggregator) {\n                          prev_value += aggregator.sum;\n                        }\n                      }`\n                @sum + prev_value\n            format: formatter\n            numInputs: 1\n\n        mSum: (formatter=usFmt) -> (arg) -> (data, rowKey, colKey) ->\n            attr = arg[0]\n            summedFacts = {}\n            i = 0\n            len = arg.length\n            while (i < len) \n                summedFacts[arg[i]] = 0\n                i++\n            push: (record) -> \n                i = 0\n                while (i < len) \n                    summedFacts[arg[i]] += parseFloat(record[arg[i]]) if not isNaN parseFloat(record[arg[i]]) \n                    i++\n                summedFacts\n            value: -> parseFloat(summedFacts[arg[0]])\n            multivalue: -> summedFacts\n            multivalue2: -> parseFloat(summedFacts)\n            format: formatter\n            numInputs: 10\n\n        mAvg: (formatter=usFmt) -> (arg) -> (data, rowKey, colKey) ->\n            attr = arg[0]\n            avgFacts = {}\n            i = 0\n            cont = {}\n            avg = {}\n            len = arg.length\n            while (i < len) \n                avgFacts[arg[i]] = 0\n                cont[arg[i]] = 0\n                avg[arg[i]] = 0\n                i++\n            push: (record) -> \n                i = 0\n                while (i < len) \n                    if not isNaN parseFloat(record[arg[i]]) \n                        cont[arg[i]] += 1\n                        avgFacts[arg[i]] += parseFloat(record[arg[i]]) \n                    i++\n                avgFacts\n            value: -> parseFloat(avgFacts[arg[0]]/cont[arg[0]]);\n            multivalue: -> \n                for own medida, m of avgFacts\n                    avg[medida] = avgFacts[medida]/cont[medida] if avgFacts.hasOwnProperty(medida)\n                avg\n\n            multivalue2: -> \n                for medida in avgFacts\n                    avg[medida] = avgFacts[medida]/cont[medida] if avgFacts.hasOwnProperty(medida)\n                parseFloat(avg)\n            format: formatter\n            numInputs: 10\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.min(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) -> \n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.max(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> @sum/@len\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) -> \n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Multi-measure Sum\":    tpl.mSum(usFmt)\n        \"Multi-measure Avg\":    tpl.mAvg(usFmt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"Moving Sum\":           tpl.movingSum(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":                    (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Multi Measure Table Rows\": (data, opts) -> multiRowsTableRenderer(data, opts)   \n        \"Multi Measure Table Columns\": (data, opts) -> multiColumnsTableRenderer(data, opts)   \n        \"Heatmap\":                  (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":              (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":              (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales = \n        en: \n            aggregators: aggregators\n            renderers: renderers\n            localeStrings: \n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter results\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\n        rx = /(\\d+)|(\\D+)/g\n        rd = /\\d/\n        rz = /^0/\n        if typeof as is \"number\" or typeof bs is \"number\"\n            return 1  if isNaN(as)\n            return -1  if isNaN(bs)\n            return as - bs\n        a = String(as).toLowerCase()\n        b = String(bs).toLowerCase()\n        return 0  if a is b\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\n        a = a.match(rx)\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 isnt b1\n                if rd.test(a1) and rd.test(b1)\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        a.length - b.length\n\n    sortAs = (order) -> \n        mapping = {}\n        for i, x of order\n            mapping[x] = i\n        (a, b) ->\n            if mapping[a]? and mapping[b]?\n                return mapping[a] - mapping[b]\n            else if mapping[a]?\n                return -1\n            else if mapping[b]?\n                return 1\n            else\n                return naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        sort = sorters(attr)\n        if $.isFunction(sort)\n            return sort \n        else\n            return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts) ->\n            @aggregator = opts.aggregator\n            @aggregatorName = opts.aggregatorName\n            @colAttrs = opts.cols\n            @rowAttrs = opts.rows\n            @valAttrs = opts.vals\n            @sorters = opts.sorters\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) -> \n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #converts to [{attr:val, attr:val},{attr:val, attr:val}] using method above\n        @convertToArray = (input) ->\n            result = []\n            PivotData.forEachRecord input, {}, (record) -> result.push record\n            return result\n\n        arrSort: (attrs) => \n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) -> \n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @arrSort(@rowAttrs)\n                @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs \n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th \n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Renderer for hierarchical table layout with multiple measures on the rows\n    ###\n\n    multiRowsTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        \n        n_medidas = 1\n        tmpAggregator = pivotData.getAggregator([], [])\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length if tmpAggregator.multivalue\n\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtAxisLabel\";\n        colspan_header = rowAttrs.length\n        colspan_header++ if n_medidas >= 1\n        console.log(rowAttrs.length);\n        th.setAttribute(\"colspan\", colspan_header);\n        th.setAttribute(\"rowspan\", colAttrs.length);\n        tr.appendChild(th);\n\n        for own j, c of colAttrs\n\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 1) #antigo 2\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            thead.appendChild tr\n            result.appendChild(thead)\n\n            tr = document.createElement(\"tr\") if j != colAttrs.length - 1 #testar\n\n        if colAttrs.length == 0\n            tr = document.createElement(\"tr\")\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            colspan_header = rowAttrs.length\n            colspan_header++ if n_medidas >1\n            th.setAttribute(\"colspan\", colspan_header)\n            tr.appendChild(th)\n            th = document.createElement(\"th\")\n            th.innerHTML = \"Total\"\n            th.className = \"pvtTotalLabel pvtTotalCol\"\n            tr.appendChild(th)\n            thead.appendChild(tr)\n            result.appendChild(thead)\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        if rowKeys.length == 0\n            for mc, m of Object.keys(tmpAggregator.multivalue())\n                tr = document.createElement(\"tr\")\n                th = document.createElement(\"th\")\n                th.textContent = m\n                th.setAttribute(\"rowspan\", 1)\n                tr.appendChild(th)\n\n                for own j, colKey of colKeys #this is the tight loop\n                    colKey = colKeys[j];\n                    aggregator = pivotData.getAggregator([], colKey)\n                    val = aggregator.multivalue()\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtVal row#{i} col#{j}\"\n                    td.textContent = aggregator.format(aggregator.multivalue()[m])\n                    td.setAttribute(\"data-value\", val)\n                    tr.appendChild td\n                totalAggregator = pivotData.getAggregator([], [])\n                val = totalAggregator.multivalue()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(totalAggregator.multivalue()[m])\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n                tbody.appendChild tr\n                result.appendChild tbody\n\n\n        #pra cada dimensao na linha\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            tmpAggregator = pivotData.getAggregator([], []);\n\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n\n                if x==1\n                    x = n_medidas;\n                else\n                    if x != -1 && n_medidas > 1\n                        x = x*n_medidas;\n                \n\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",1) #antigo  =2\n                    tr.appendChild th\n\n            for own mc, m of Object.keys(tmpAggregator.multivalue())\n                th = document.createElement(\"th\")\n                th.className = \"pvtRowLabel\"\n                th.textContent = m\n                th.setAttribute(\"rowspan\", 1)\n\n                tr.appendChild(th)\n\n                for own j, colKey of colKeys #this is the tight loop\n                    aggregator = pivotData.getAggregator(rowKey, colKey)\n                    if aggregator.multivalue\n                        val = aggregator.format(aggregator.multivalue()[m])\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        tr.appendChild td\n                    else\n                        val = aggregator.value()\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        tr.appendChild td\n\n                totalAggregator = pivotData.getAggregator(rowKey, [])\n                val = totalAggregator.multivalue()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(totalAggregator.multivalue()[m])\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n                tbody.appendChild tr\n                result.appendChild tbody\n                tr = document.createElement(\"tr\") if mc < Object.keys(tmpAggregator.multivalue())[\"length\"] - 1\n\n\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        colspan_total = rowAttrs.length;\n        colspan_total++ if n_medidas >= 1\n      \n        th.setAttribute(\"colspan\", colspan_total)\n        tr.appendChild th\n\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n\n            if totalAggregator.multivalue\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row\" + i + \" col\" + j\n                val = 0\n                for m in Object.keys(totalAggregator.multivalue())\n                  val+=totalAggregator.multivalue()[m]\n                \n                td.innerHTML = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"col\" + j)\n                tr.appendChild(td);\n            else\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"col\"+j)\n                tr.appendChild td\n\n        totalAggregator = pivotData.getAggregator([], [])\n        val = 0\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        for m in Object.keys(totalAggregator.multivalue())\n            val+=totalAggregator.multivalue()[m]\n      \n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Renderer for hierarchical table layout with multiple measures on the columns\n    ###\n    multiColumnsTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        n_medidas = 1\n\n        tmpAggregator = pivotData.getAggregator([], [])\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length if tmpAggregator.multivalue\n\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtAxisLabel\"\n        th.setAttribute(\"colspan\", rowAttrs.length)\n        th.setAttribute(\"rowspan\", colAttrs.length+1)\n        tr.appendChild(th)\n\n        for own j, c of colAttrs\n\n            # tr = document.createElement(\"tr\")\n            # if parseInt(j) == 0 and rowAttrs.length != 0\n            #     th = document.createElement(\"th\")\n            #     th.setAttribute(\"colspan\", rowAttrs.length)\n            #     th.setAttribute(\"rowspan\", colAttrs.length)\n            #     tr.appendChild th\n            # th = document.createElement(\"th\")\n            # th.className = \"pvtAxisLabel\"\n            # th.textContent = c\n            # tr.appendChild th\n\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n\n                if x==1 \n                    x = n_medidas;\n                else\n                    if x != -1 && n_medidas > 1\n                        x = x*n_medidas\n\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 1)\n                    tr.appendChild th\n\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", 2)\n                tr.appendChild th\n            thead.appendChild tr\n            result.appendChild thead\n\n            tr = document.createElement(\"tr\")\n\n            #add line for measures\n            if parseInt(j) == colAttrs.length - 1\n                for own i, colKey of colKeys\n                    for m in Object.keys(tmpAggregator.multivalue())\n                        th = document.createElement(\"th\")\n                        th.className = \"pvtColLabel\"\n                        th.textContent = m\n                        th.setAttribute(\"colspan\", 1)\n                        th.setAttribute(\"rowspan\", 1) if parseInt(j) == colAttrs.length - 1 && rowAttrs.length != 0\n                        tr.appendChild(th)\n                thead.appendChild(tr)\n                result.appendChild(thead)\n\n        console.log(colAttrs)\n        if colAttrs.length == 0\n            console.log(\"oi\")\n            tr = document.createElement(\"tr\")\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.setAttribute(\"colspan\", rowAttrs.length)\n            th.setAttribute(\"rowspan\", colAttrs.length+1)\n            tr.appendChild(th);\n            \n            for m in Object.keys(tmpAggregator.multivalue())\n                th = document.createElement(\"th\")\n                th.className = \"pvtColLabel\"\n                th.textContent = m;\n                th.setAttribute(\"colspan\", 1)\n                tr.appendChild(th)\n            \n            \n            th = document.createElement(\"th\")\n            th.innerHTML = \"Total\"\n            th.className = \"pvtTotalLabel pvtTotalCol\"\n            tr.appendChild(th)\n            thead.appendChild(tr)\n            result.appendChild(thead)\n              \n\n        #then a row for row header headers\n        # if rowAttrs.length !=0\n        #     tr = document.createElement(\"tr\")\n        #     for own i, r of rowAttrs\n        #         th = document.createElement(\"th\")\n        #         th.className = \"pvtAxisLabel\"\n        #         th.textContent = r\n        #         tr.appendChild th \n        #     th = document.createElement(\"th\")\n        #     if colAttrs.length ==0\n        #         th.className = \"pvtTotalLabel\"\n        #         th.innerHTML = opts.localeStrings.totals\n        #     tr.appendChild th\n        #     thead.appendChild tr\n        # result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",1)\n                    tr.appendChild th\n\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                if aggregator.multivalue\n                    for own mc, m of Object.keys(aggregator.multivalue())\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.innerHTML = aggregator.format(aggregator.multivalue()[m])\n                        td.setAttribute(\"data-value\", aggregator.format(aggregator.multivalue()[m]))\n                        tr.appendChild(td)\n                else\n                    for n in n_medidas\n                        val = aggregator.value()\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        tr.appendChild td\n\n            if colAttrs.length == 0\n                aggregator = pivotData.getAggregator(rowKey, [])\n                for m in Object.keys(aggregator.multivalue())\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtVal row\" + i + \" col\" + j\n                    td.innerHTML = aggregator.format(aggregator.multivalue()[m])\n                    td.setAttribute(\"data-value\", aggregator.multivalue()[m])\n                    tr.appendChild(td)      \n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = 0\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n\n            for m in Object.keys(totalAggregator.multivalue())\n                val+=totalAggregator.multivalue()[m];\n\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n            result.appendChild tbody\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length)\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.multivalue()\n            for m in Object.keys(val)\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.innerHTML = totalAggregator.format(val[m]);\n                td.setAttribute(\"data-value\", val[m])\n                td.setAttribute(\"data-for\", \"col\" + j)\n                tr.appendChild(td)\n\n        if colAttrs.length == 0\n            aggregator = pivotData.getAggregator([], []);\n            for m in Object.keys(aggregator.multivalue())\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row\" + i + \" col\" + j\n                td.innerHTML = aggregator.format(aggregator.multivalue()[m])\n                td.setAttribute(\"data-value\", aggregator.multivalue()[m])\n                tr.appendChild(td)\n    \n        totalAggregator = pivotData.getAggregator([], [])\n        val = 0\n        for m in Object.keys(totalAggregator.multivalue())\n            val+=totalAggregator.multivalue()[m];\n\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, opts) ->\n        defaults =\n            cols : []\n            rows: []\n            vals: []\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: -> \n            derivedAttributes: {},\n            renderer: pivotTableRenderer\n            rendererOptions: null\n            localeStrings: locales.en.localeStrings\n\n        opts = $.extend defaults, opts\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n        \n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        if not locales[locale]?\n            locale = \"en\"\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            menuLimit: 200\n            cols: [], rows: [], vals: []\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            rendererOptions: localeStrings: locales[locale].localeStrings\n            onRefresh: null\n            filter: -> true\n            sorters: -> \n            localeStrings: locales[locale].localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend defaults, inputOpts\n        else\n            opts = existingOpts\n\n        try\n            #cache the input in some useful form\n            input = PivotData.convertToArray(input)\n            tblCols = (k for own k of input[0])\n            tblCols.push c for own c of opts.derivedAttributes when (c not in tblCols)\n\n            #figure out the cardinality and some stats\n            axisValues = {}\n            axisValues[x] = {} for x in tblCols\n\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                for own k, v of record when opts.filter(record)\n                    v ?= \"null\"\n                    axisValues[k][v] ?= 0\n                    axisValues[k][v]++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (c for c in tblCols when c not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                colList.addClass('pvtVertList')\n            else\n                colList.addClass('pvtHorizList')\n\n            for own i, c of shownAttributes\n                do (c) ->\n                    keys = (k for k of axisValues[c])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").text(\"#{c} (#{keys.length})\")\n                    if keys.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        btns = $(\"<p>\").appendTo(valueList)\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectAll).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", true\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectNone).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", false\n                        btns.append $(\"<br>\")\n                        btns.append $(\"<input>\", {type: \"text\", placeholder: opts.localeStrings.filterResults, class: \"pvtSearch\"}).bind \"keyup\", ->\n                            filter = $(this).val().toLowerCase()\n                            valueList.find('.pvtCheckContainer p').each ->\n                                testString = $(this).text().toLowerCase().indexOf(filter)\n                                if testString isnt -1\n                                    $(this).show()\n                                else\n                                    $(this).hide()\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for k in keys.sort(getSort(opts.sorters, c))\n                             v = axisValues[c][k]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[c]\n                                filterItemExcluded = (k not in opts.inclusions[c])\n                             else if opts.exclusions[c]\n                                filterItemExcluded = (k in opts.exclusions[c])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [c,k])\n                                .appendTo filterItem\n                             filterItem.append $(\"<span>\").text k\n                             filterItem.append $(\"<span>\").text \" (\"+v+\")\"\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    updateFilter = ->\n                        unselectedCount = valueList.find(\"[type='checkbox']\").length -\n                                          valueList.find(\"[type='checkbox']:checked\").length\n                        if unselectedCount > 0\n                            attrElem.addClass \"pvtFilteredAttribute\"\n                        else\n                            attrElem.removeClass \"pvtFilteredAttribute\"\n                        if keys.length > opts.menuLimit\n                            valueList.toggle()\n                        else\n                            valueList.toggle(0, refresh)\n\n                    $(\"<p>\").appendTo(valueList)\n                        .append $(\"<button>\", {type:\"button\"}).text(\"OK\").bind \"click\", updateFilter\n\n                    showFilterList = (e) ->\n                        {left: clickLeft, top: clickTop, } = $(e.currentTarget).position()\n                        valueList.css(left: clickLeft+10, top: clickTop+10).toggle()\n                        valueList.find('.pvtSearch').val('')\n                        valueList.find('.pvtCheckContainer p').show()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\")\n                        .bind \"click\", showFilterList\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink)\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    colList.append(attrElem).append(valueList)\n\n                    attrElem.bind \"dblclick\", showFilterList\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend colList\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(colList)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+record[k] in excludedItems\n                    return true\n\n                pivotTable.pivot(input,subopts)\n                pivotUIOptions = $.extend opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n\n\n"]}