{"version":3,"sources":["/source/pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","hasProp","hasOwnProperty","slice","bind","fn","me","apply","arguments","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","multiColumnsTableRenderer","multiRowsTableRenderer","naturalSort","numberFormat","pivotTableRenderer","renderers","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg1","attr","uniq","record","ref1","call","numInputs","listUnique","sep","join","sum","parseFloat","movingSum","colKeys","counter","flat_col_key","flat_item","itter","j","k","prev_value","ref","getColKeys","String","fromCharCode","aggregator","getAggregator","mSum","arg","len","summedFacts","multivalue","multivalue2","mAvg","avg","avgFacts","cont","m","medida","len1","min","val","Math","max","average","sumOverSum","denom","num","sumNum","sumDenom","fractionOf","wrapped","type","selector","total","row","col","inner","tpl","Count","Count Unique Values","List Unique Values","Sum","Multi-measure Sum","Multi-measure Avg","Average","Minimum","Maximum","Moving Sum","Sum over Sum","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Multi Measure Table Rows","Multi Measure Table Columns","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","a","a1","b","b1","rd","rx","rz","toLowerCase","match","shift","order","mapping","sorters","sort","isFunction","input","getRowKeys","sortKeys","arrSort","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","tree","rowKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","derivedAttributes","filter","processRecord","f","addRecord","compactRecord","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","convertToArray","prototype","attrs","sortersArr","comparison","sorter","flatColKey","flatRowKey","len2","o","ref2","ref3","ref4","agg","pivotUtilities","pivotData","c","r","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","document","createElement","className","arr","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","colspan_header","colspan_total","mc","n_medidas","tmpAggregator","Object","keys","console","log","len3","len4","len5","len6","len7","len8","n","q","ref5","ref6","ref7","ref8","s","t","u","w","y","pivot","e","dataClass","renderer","rendererOptions","error","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","inputOpts","overwrite","locale","attrLength","axisValues","colList","existingOpts","initialRender","pivotTable","refresh","refreshDelayed","rendererControl","shownAttributes","tr1","tr2","uiTable","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","btns","checkContainer","filterItem","filterItemExcluded","hasExcludedItem","showFilterList","triangleLink","updateFilter","valueList","hide","find","prop","placeholder","testString","show","unselectedCount","removeClass","toggle","clickLeft","clickTop","currentTarget","position","left","top","css","prepend","inArray","rendererName","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","unusedAttrsContainer","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","values","nonRed","round","colorScale","forEachCell","elem"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n        \ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults = \n            digitsAfterDecimal: 2, scaler: 1, \n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend defaults, opts\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.length\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.join sep\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        movingSum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> \n                colKeys = data.getColKeys()\n                counter = 0\n                flat_col_key = colKey.join(String.fromCharCode(0))\n                for own j, item of colKeys\n                    flat_item = item.join(String.fromCharCode(0))\n                    itter = counter if flat_item == flat_col_key\n                    counter++\n                prev_value = 0\n                if itter > 0 \n                    i = k = 1\n                    ref = itter + 1\n                    i = k = 1\n                    ref = itter + 1\n                    `for (i = k = 1, ref = itter + 1; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {\n                        aggregator = data.getAggregator(rowKey, colKeys[itter - i]);\n                        if ('sum' in aggregator) {\n                          prev_value += aggregator.sum;\n                        }\n                      }`\n                @sum + prev_value\n            format: formatter\n            numInputs: 1\n\n        mSum: (formatter=usFmt) -> (arg) -> (data, rowKey, colKey) ->\n            attr = arg[0]\n            summedFacts = {}\n            i = 0\n            len = arg.length\n            while (i < len) \n                summedFacts[arg[i]] = 0\n                i++\n            push: (record) -> \n                i = 0\n                while (i < len) \n                    summedFacts[arg[i]] += parseFloat(record[arg[i]]) if not isNaN parseFloat(record[arg[i]]) \n                    i++\n                summedFacts\n            value: -> parseFloat(summedFacts[arg[0]])\n            multivalue: -> summedFacts\n            multivalue2: -> parseFloat(summedFacts)\n            format: formatter\n            numInputs: 10\n\n        mAvg: (formatter=usFmt) -> (arg) -> (data, rowKey, colKey) ->\n            attr = arg[0]\n            avgFacts = {}\n            i = 0\n            cont = {}\n            avg = {}\n            len = arg.length\n            while (i < len) \n                avgFacts[arg[i]] = 0\n                cont[arg[i]] = 0\n                avg[arg[i]] = 0\n                i++\n            push: (record) -> \n                i = 0\n                while (i < len) \n                    if not isNaN parseFloat(record[arg[i]]) \n                        cont[arg[i]] += 1\n                        avgFacts[arg[i]] += parseFloat(record[arg[i]]) \n                    i++\n                avgFacts\n            value: -> parseFloat(avgFacts[arg[0]]/cont[arg[0]]);\n            multivalue: -> \n                for own medida, m of avgFacts\n                    avg[medida] = avgFacts[medida]/cont[medida] if avgFacts.hasOwnProperty(medida)\n                avg\n\n            multivalue2: -> \n                for medida in avgFacts\n                    avg[medida] = avgFacts[medida]/cont[medida] if avgFacts.hasOwnProperty(medida)\n                parseFloat(avg)\n            format: formatter\n            numInputs: 10\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.min(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) -> \n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.max(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> @sum/@len\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) -> \n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Multi-measure Sum\":    tpl.mSum(usFmt)\n        \"Multi-measure Avg\":    tpl.mAvg(usFmt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"Moving Sum\":           tpl.movingSum(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":                    (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Multi Measure Table Rows\": (data, opts) -> multiRowsTableRenderer(data, opts)   \n        \"Multi Measure Table Columns\": (data, opts) -> multiColumnsTableRenderer(data, opts)   \n        \"Heatmap\":                  (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":              (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":              (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales = \n        en: \n            aggregators: aggregators\n            renderers: renderers\n            localeStrings: \n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter results\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\n        rx = /(\\d+)|(\\D+)/g\n        rd = /\\d/\n        rz = /^0/\n        if typeof as is \"number\" or typeof bs is \"number\"\n            return 1  if isNaN(as)\n            return -1  if isNaN(bs)\n            return as - bs\n        a = String(as).toLowerCase()\n        b = String(bs).toLowerCase()\n        return 0  if a is b\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\n        a = a.match(rx)\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 isnt b1\n                if rd.test(a1) and rd.test(b1)\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        a.length - b.length\n\n    sortAs = (order) -> \n        mapping = {}\n        for i, x of order\n            mapping[x] = i\n        (a, b) ->\n            if mapping[a]? and mapping[b]?\n                return mapping[a] - mapping[b]\n            else if mapping[a]?\n                return -1\n            else if mapping[b]?\n                return 1\n            else\n                return naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        sort = sorters(attr)\n        if $.isFunction(sort)\n            return sort \n        else\n            return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts) ->\n            @aggregator = opts.aggregator\n            @aggregatorName = opts.aggregatorName\n            @colAttrs = opts.cols\n            @rowAttrs = opts.rows\n            @valAttrs = opts.vals\n            @sorters = opts.sorters\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) -> \n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #converts to [{attr:val, attr:val},{attr:val, attr:val}] using method above\n        @convertToArray = (input) ->\n            result = []\n            PivotData.forEachRecord input, {}, (record) -> result.push record\n            return result\n\n        arrSort: (attrs) => \n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) -> \n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @arrSort(@rowAttrs)\n                @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs \n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th \n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Renderer for hierarchical table layout with multiple measures on the rows\n    ###\n\n    multiRowsTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        \n        n_medidas = 1\n        tmpAggregator = pivotData.getAggregator([], [])\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length if tmpAggregator.multivalue\n\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtAxisLabel\";\n        colspan_header = rowAttrs.length\n        colspan_header++ if n_medidas >= 1\n        console.log(rowAttrs.length);\n        th.setAttribute(\"colspan\", colspan_header);\n        th.setAttribute(\"rowspan\", colAttrs.length);\n        tr.appendChild(th);\n\n        for own j, c of colAttrs\n\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 1) #antigo 2\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            thead.appendChild tr\n            result.appendChild(thead)\n\n            tr = document.createElement(\"tr\") if j != colAttrs.length - 1 #testar\n\n        if colAttrs.length == 0\n            tr = document.createElement(\"tr\")\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            colspan_header = rowAttrs.length\n            colspan_header++ if n_medidas >1\n            th.setAttribute(\"colspan\", colspan_header)\n            tr.appendChild(th)\n            th = document.createElement(\"th\")\n            th.innerHTML = \"Total\"\n            th.className = \"pvtTotalLabel pvtTotalCol\"\n            tr.appendChild(th)\n            thead.appendChild(tr)\n            result.appendChild(thead)\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        if rowKeys.length == 0\n            for mc, m of Object.keys(tmpAggregator.multivalue())\n                tr = document.createElement(\"tr\")\n                th = document.createElement(\"th\")\n                th.textContent = m\n                th.setAttribute(\"rowspan\", 1)\n                tr.appendChild(th)\n\n                for own j, colKey of colKeys #this is the tight loop\n                    colKey = colKeys[j];\n                    aggregator = pivotData.getAggregator([], colKey)\n                    val = aggregator.multivalue()\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtVal row#{i} col#{j}\"\n                    td.textContent = aggregator.format(aggregator.multivalue()[m])\n                    td.setAttribute(\"data-value\", val)\n                    tr.appendChild td\n                totalAggregator = pivotData.getAggregator([], [])\n                val = totalAggregator.multivalue()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(totalAggregator.multivalue()[m])\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n                tbody.appendChild tr\n                result.appendChild tbody\n\n\n        #pra cada dimensao na linha\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            tmpAggregator = pivotData.getAggregator([], []);\n\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n\n                if x==1\n                    x = n_medidas;\n                else\n                    if x != -1 && n_medidas > 1\n                        x = x*n_medidas;\n                \n\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",1) #antigo  =2\n                    tr.appendChild th\n\n            for own mc, m of Object.keys(tmpAggregator.multivalue())\n                th = document.createElement(\"th\")\n                th.className = \"pvtRowLabel\"\n                th.textContent = m\n                th.setAttribute(\"rowspan\", 1)\n\n                tr.appendChild(th)\n\n                for own j, colKey of colKeys #this is the tight loop\n                    aggregator = pivotData.getAggregator(rowKey, colKey)\n                    if aggregator.multivalue\n                        val = aggregator.format(aggregator.multivalue()[m])\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        tr.appendChild td\n                    else\n                        val = aggregator.value()\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        tr.appendChild td\n\n                totalAggregator = pivotData.getAggregator(rowKey, [])\n                val = totalAggregator.multivalue()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(totalAggregator.multivalue()[m])\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n                tbody.appendChild tr\n                result.appendChild tbody\n                tr = document.createElement(\"tr\") if mc < Object.keys(tmpAggregator.multivalue())[\"length\"] - 1\n\n\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        colspan_total = rowAttrs.length;\n        colspan_total++ if n_medidas >= 1\n      \n        th.setAttribute(\"colspan\", colspan_total)\n        tr.appendChild th\n\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n\n            if totalAggregator.multivalue\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row\" + i + \" col\" + j\n                val = 0\n                for m in Object.keys(totalAggregator.multivalue())\n                  val+=totalAggregator.multivalue()[m]\n                \n                td.innerHTML = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"col\" + j)\n                tr.appendChild(td);\n            else\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"col\"+j)\n                tr.appendChild td\n\n        totalAggregator = pivotData.getAggregator([], [])\n        val = 0\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        for m in Object.keys(totalAggregator.multivalue())\n            val+=totalAggregator.multivalue()[m]\n      \n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Renderer for hierarchical table layout with multiple measures on the columns\n    ###\n    multiColumnsTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        n_medidas = 1\n\n        tmpAggregator = pivotData.getAggregator([], [])\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length if tmpAggregator.multivalue\n\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtAxisLabel\"\n        th.setAttribute(\"colspan\", rowAttrs.length)\n        th.setAttribute(\"rowspan\", colAttrs.length+1)\n        tr.appendChild(th)\n\n        for own j, c of colAttrs\n\n            # tr = document.createElement(\"tr\")\n            # if parseInt(j) == 0 and rowAttrs.length != 0\n            #     th = document.createElement(\"th\")\n            #     th.setAttribute(\"colspan\", rowAttrs.length)\n            #     th.setAttribute(\"rowspan\", colAttrs.length)\n            #     tr.appendChild th\n            # th = document.createElement(\"th\")\n            # th.className = \"pvtAxisLabel\"\n            # th.textContent = c\n            # tr.appendChild th\n\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n\n                if x==1 \n                    x = n_medidas;\n                else\n                    if x != -1 && n_medidas > 1\n                        x = x*n_medidas\n\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 1)\n                    tr.appendChild th\n\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", 2)\n                tr.appendChild th\n            thead.appendChild tr\n            result.appendChild thead\n\n            tr = document.createElement(\"tr\")\n\n            #add line for measures\n            if parseInt(j) == colAttrs.length - 1\n                for own i, colKey of colKeys\n                    for m in Object.keys(tmpAggregator.multivalue())\n                        th = document.createElement(\"th\")\n                        th.className = \"pvtColLabel\"\n                        th.textContent = m\n                        th.setAttribute(\"colspan\", 1)\n                        th.setAttribute(\"rowspan\", 1) if parseInt(j) == colAttrs.length - 1 && rowAttrs.length != 0\n                        tr.appendChild(th)\n                thead.appendChild(tr)\n                result.appendChild(thead)\n\n        console.log(colAttrs)\n        if colAttrs.length == 0\n            console.log(\"oi\")\n            tr = document.createElement(\"tr\")\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.setAttribute(\"colspan\", rowAttrs.length)\n            th.setAttribute(\"rowspan\", colAttrs.length+1)\n            tr.appendChild(th);\n            \n            for m in Object.keys(tmpAggregator.multivalue())\n                th = document.createElement(\"th\")\n                th.className = \"pvtColLabel\"\n                th.textContent = m;\n                th.setAttribute(\"colspan\", 1)\n                tr.appendChild(th)\n            \n            \n            th = document.createElement(\"th\")\n            th.innerHTML = \"Total\"\n            th.className = \"pvtTotalLabel pvtTotalCol\"\n            tr.appendChild(th)\n            thead.appendChild(tr)\n            result.appendChild(thead)\n              \n\n        #then a row for row header headers\n        # if rowAttrs.length !=0\n        #     tr = document.createElement(\"tr\")\n        #     for own i, r of rowAttrs\n        #         th = document.createElement(\"th\")\n        #         th.className = \"pvtAxisLabel\"\n        #         th.textContent = r\n        #         tr.appendChild th \n        #     th = document.createElement(\"th\")\n        #     if colAttrs.length ==0\n        #         th.className = \"pvtTotalLabel\"\n        #         th.innerHTML = opts.localeStrings.totals\n        #     tr.appendChild th\n        #     thead.appendChild tr\n        # result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",1)\n                    tr.appendChild th\n\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                if aggregator.multivalue\n                    for own mc, m of Object.keys(aggregator.multivalue())\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.innerHTML = aggregator.format(aggregator.multivalue()[m])\n                        td.setAttribute(\"data-value\", aggregator.format(aggregator.multivalue()[m]))\n                        tr.appendChild(td)\n                else\n                    for n in n_medidas\n                        val = aggregator.value()\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        tr.appendChild td\n\n            if colAttrs.length == 0\n                aggregator = pivotData.getAggregator(rowKey, [])\n                for m in Object.keys(aggregator.multivalue())\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtVal row\" + i + \" col\" + j\n                    td.innerHTML = aggregator.format(aggregator.multivalue()[m])\n                    td.setAttribute(\"data-value\", aggregator.multivalue()[m])\n                    tr.appendChild(td)      \n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = 0\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n\n            for m in Object.keys(totalAggregator.multivalue())\n                val+=totalAggregator.multivalue()[m];\n\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n            result.appendChild tbody\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length)\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.multivalue()\n            for m in Object.keys(val)\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.innerHTML = totalAggregator.format(val[m]);\n                td.setAttribute(\"data-value\", val[m])\n                td.setAttribute(\"data-for\", \"col\" + j)\n                tr.appendChild(td)\n\n        if colAttrs.length == 0\n            aggregator = pivotData.getAggregator([], []);\n            for m in Object.keys(aggregator.multivalue())\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row\" + i + \" col\" + j\n                td.innerHTML = aggregator.format(aggregator.multivalue()[m])\n                td.setAttribute(\"data-value\", aggregator.multivalue()[m])\n                tr.appendChild(td)\n    \n        totalAggregator = pivotData.getAggregator([], [])\n        val = 0\n        for m in Object.keys(totalAggregator.multivalue())\n            val+=totalAggregator.multivalue()[m];\n\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, opts) ->\n        defaults =\n            cols : []\n            rows: []\n            vals: []\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: -> \n            derivedAttributes: {},\n            renderer: pivotTableRenderer\n            rendererOptions: null\n            localeStrings: locales.en.localeStrings\n\n        opts = $.extend defaults, opts\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n        \n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        if not locales[locale]?\n            locale = \"en\"\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            menuLimit: 200\n            cols: [], rows: [], vals: []\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            rendererOptions: localeStrings: locales[locale].localeStrings\n            onRefresh: null\n            filter: -> true\n            sorters: -> \n            localeStrings: locales[locale].localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend defaults, inputOpts\n        else\n            opts = existingOpts\n\n        try\n            #cache the input in some useful form\n            input = PivotData.convertToArray(input)\n            tblCols = (k for own k of input[0])\n            tblCols.push c for own c of opts.derivedAttributes when (c not in tblCols)\n\n            #figure out the cardinality and some stats\n            axisValues = {}\n            axisValues[x] = {} for x in tblCols\n\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                for own k, v of record when opts.filter(record)\n                    v ?= \"null\"\n                    axisValues[k][v] ?= 0\n                    axisValues[k][v]++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (c for c in tblCols when c not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                colList.addClass('pvtVertList')\n            else\n                colList.addClass('pvtHorizList')\n\n            for own i, c of shownAttributes\n                do (c) ->\n                    keys = (k for k of axisValues[c])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").text(\"#{c} (#{keys.length})\")\n                    if keys.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        btns = $(\"<p>\").appendTo(valueList)\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectAll).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", true\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectNone).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", false\n                        btns.append $(\"<br>\")\n                        btns.append $(\"<input>\", {type: \"text\", placeholder: opts.localeStrings.filterResults, class: \"pvtSearch\"}).bind \"keyup\", ->\n                            filter = $(this).val().toLowerCase()\n                            valueList.find('.pvtCheckContainer p').each ->\n                                testString = $(this).text().toLowerCase().indexOf(filter)\n                                if testString isnt -1\n                                    $(this).show()\n                                else\n                                    $(this).hide()\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for k in keys.sort(getSort(opts.sorters, c))\n                             v = axisValues[c][k]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[c]\n                                filterItemExcluded = (k not in opts.inclusions[c])\n                             else if opts.exclusions[c]\n                                filterItemExcluded = (k in opts.exclusions[c])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [c,k])\n                                .appendTo filterItem\n                             filterItem.append $(\"<span>\").text k\n                             filterItem.append $(\"<span>\").text \" (\"+v+\")\"\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    updateFilter = ->\n                        unselectedCount = valueList.find(\"[type='checkbox']\").length -\n                                          valueList.find(\"[type='checkbox']:checked\").length\n                        if unselectedCount > 0\n                            attrElem.addClass \"pvtFilteredAttribute\"\n                        else\n                            attrElem.removeClass \"pvtFilteredAttribute\"\n                        if keys.length > opts.menuLimit\n                            valueList.toggle()\n                        else\n                            valueList.toggle(0, refresh)\n\n                    $(\"<p>\").appendTo(valueList)\n                        .append $(\"<button>\", {type:\"button\"}).text(\"OK\").bind \"click\", updateFilter\n\n                    showFilterList = (e) ->\n                        {left: clickLeft, top: clickTop, } = $(e.currentTarget).position()\n                        valueList.css(left: clickLeft+10, top: clickTop+10).toggle()\n                        valueList.find('.pvtSearch').val('')\n                        valueList.find('.pvtCheckContainer p').show()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\")\n                        .bind \"click\", showFilterList\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink)\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    colList.append(attrElem).append(valueList)\n\n                    attrElem.bind \"dblclick\", showFilterList\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend colList\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(colList)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+record[k] in excludedItems\n                    return true\n\n                pivotTable.pivot(input,subopts)\n                pivotUIOptions = $.extend opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n\n\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    hasProp = {}.hasOwnProperty,\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, multiColumnsTableRenderer, multiRowsTableRenderer, naturalSort, numberFormat, pivotTableRenderer, renderers, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend(defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref1;\n                if (ref1 = record[attr], indexOf.call(this.uniq, ref1) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref1;\n                if (ref1 = record[attr], indexOf.call(this.uniq, ref1) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      movingSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                var colKeys, counter, flat_col_key, flat_item, i, item, itter, j, k, prev_value, ref;\n                colKeys = data.getColKeys();\n                counter = 0;\n                flat_col_key = colKey.join(String.fromCharCode(0));\n                for (j in colKeys) {\n                  if (!hasProp.call(colKeys, j)) continue;\n                  item = colKeys[j];\n                  flat_item = item.join(String.fromCharCode(0));\n                  if (flat_item === flat_col_key) {\n                    itter = counter;\n                  }\n                  counter++;\n                }\n                prev_value = 0;\n                if (itter > 0) {\n                  i = k = 1;\n                  ref = itter + 1;\n                  i = k = 1;\n                  ref = itter + 1;\n                  for (i = k = 1, ref = itter + 1; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {\n                        aggregator = data.getAggregator(rowKey, colKeys[itter - i]);\n                        if ('sum' in aggregator) {\n                          prev_value += aggregator.sum;\n                        }\n                      };\n                }\n                return this.sum + prev_value;\n              },\n              format: formatter,\n              numInputs: 1\n            };\n          };\n        };\n      },\n      mSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          return function(data, rowKey, colKey) {\n            var attr, i, len, summedFacts;\n            attr = arg[0];\n            summedFacts = {};\n            i = 0;\n            len = arg.length;\n            while (i < len) {\n              summedFacts[arg[i]] = 0;\n              i++;\n            }\n            return {\n              push: function(record) {\n                i = 0;\n                while (i < len) {\n                  if (!isNaN(parseFloat(record[arg[i]]))) {\n                    summedFacts[arg[i]] += parseFloat(record[arg[i]]);\n                  }\n                  i++;\n                }\n                return summedFacts;\n              },\n              value: function() {\n                return parseFloat(summedFacts[arg[0]]);\n              },\n              multivalue: function() {\n                return summedFacts;\n              },\n              multivalue2: function() {\n                return parseFloat(summedFacts);\n              },\n              format: formatter,\n              numInputs: 10\n            };\n          };\n        };\n      },\n      mAvg: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          return function(data, rowKey, colKey) {\n            var attr, avg, avgFacts, cont, i, len;\n            attr = arg[0];\n            avgFacts = {};\n            i = 0;\n            cont = {};\n            avg = {};\n            len = arg.length;\n            while (i < len) {\n              avgFacts[arg[i]] = 0;\n              cont[arg[i]] = 0;\n              avg[arg[i]] = 0;\n              i++;\n            }\n            return {\n              push: function(record) {\n                i = 0;\n                while (i < len) {\n                  if (!isNaN(parseFloat(record[arg[i]]))) {\n                    cont[arg[i]] += 1;\n                    avgFacts[arg[i]] += parseFloat(record[arg[i]]);\n                  }\n                  i++;\n                }\n                return avgFacts;\n              },\n              value: function() {\n                return parseFloat(avgFacts[arg[0]] / cont[arg[0]]);\n              },\n              multivalue: function() {\n                var m, medida;\n                for (medida in avgFacts) {\n                  if (!hasProp.call(avgFacts, medida)) continue;\n                  m = avgFacts[medida];\n                  if (avgFacts.hasOwnProperty(medida)) {\n                    avg[medida] = avgFacts[medida] / cont[medida];\n                  }\n                }\n                return avg;\n              },\n              multivalue2: function() {\n                var l, len1, medida;\n                for (l = 0, len1 = avgFacts.length; l < len1; l++) {\n                  medida = avgFacts[l];\n                  if (avgFacts.hasOwnProperty(medida)) {\n                    avg[medida] = avgFacts[medida] / cont[medida];\n                  }\n                }\n                return parseFloat(avg);\n              },\n              format: formatter,\n              numInputs: 10\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref1, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref1 = this.val) != null ? ref1 : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref1, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref1 = this.val) != null ? ref1 : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var denom, num;\n          num = arg1[0], denom = arg1[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Multi-measure Sum\": tpl.mSum(usFmt),\n        \"Multi-measure Avg\": tpl.mAvg(usFmt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"Moving Sum\": tpl.movingSum(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Multi Measure Table Rows\": function(data, opts) {\n        return multiRowsTableRenderer(data, opts);\n      },\n      \"Multi Measure Table Columns\": function(data, opts) {\n        return multiColumnsTableRenderer(data, opts);\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter results\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, rd, rx, rz;\n        rx = /(\\d+)|(\\D+)/g;\n        rd = /\\d/;\n        rz = /^0/;\n        if (typeof as === \"number\" || typeof bs === \"number\") {\n          if (isNaN(as)) {\n            return 1;\n          }\n          if (isNaN(bs)) {\n            return -1;\n          }\n          return as - bs;\n        }\n        a = String(as).toLowerCase();\n        b = String(bs).toLowerCase();\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, mapping, x;\n      mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      sort = sorters(attr);\n      if ($.isFunction(sort)) {\n        return sort;\n      } else {\n        return naturalSort;\n      }\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.aggregator = opts.aggregator;\n        this.aggregatorName = opts.aggregatorName;\n        this.colAttrs = opts.cols;\n        this.rowAttrs = opts.rows;\n        this.valAttrs = opts.vals;\n        this.sorters = opts.sorters;\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(input, opts.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref1, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref1, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref1 = v(record)) != null ? ref1 : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref1 = input[0];\n              for (j in ref1) {\n                if (!hasProp.call(ref1, j)) continue;\n                k = ref1[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.convertToArray = function(input) {\n        var result;\n        result = [];\n        PivotData.forEachRecord(input, {}, function(record) {\n          return result.push(record);\n        });\n        return result;\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        if (!this.sorted) {\n          this.sorted = true;\n          this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          return this.colKeys.sort(this.arrSort(this.colAttrs));\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, o, ref1, ref2, ref3, ref4, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref1 = this.colAttrs;\n        for (l = 0, len1 = ref1.length; l < len1; l++) {\n          x = ref1[l];\n          colKey.push((ref2 = record[x]) != null ? ref2 : \"null\");\n        }\n        ref3 = this.rowAttrs;\n        for (o = 0, len2 = ref3.length; o < len2; o++) {\n          x = ref3[o];\n          rowKey.push((ref4 = record[x]) != null ? ref4 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, noDraw, o, ref1, ref2, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref1 = j; 0 <= ref1 ? l <= ref1 : l >= ref1; x = 0 <= ref1 ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = o = 0, ref2 = j; 0 <= ref2 ? o <= ref2 : o >= ref2; x = 0 <= ref2 ? ++o : --o) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Renderer for hierarchical table layout with multiple measures on the rows\n     */\n    multiRowsTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, colspan_header, colspan_total, defaults, i, j, l, len1, len2, m, mc, n_medidas, o, ref1, ref2, ref3, ref4, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, tmpAggregator, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, noDraw, o, ref1, ref2, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref1 = j; 0 <= ref1 ? l <= ref1 : l >= ref1; x = 0 <= ref1 ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = o = 0, ref2 = j; 0 <= ref2 ? o <= ref2 : o >= ref2; x = 0 <= ref2 ? ++o : --o) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      n_medidas = 1;\n      tmpAggregator = pivotData.getAggregator([], []);\n      if (tmpAggregator.multivalue) {\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length;\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtAxisLabel\";\n      colspan_header = rowAttrs.length;\n      if (n_medidas >= 1) {\n        colspan_header++;\n      }\n      console.log(rowAttrs.length);\n      th.setAttribute(\"colspan\", colspan_header);\n      th.setAttribute(\"rowspan\", colAttrs.length);\n      tr.appendChild(th);\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 1);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n        result.appendChild(thead);\n        if (j !== colAttrs.length - 1) {\n          tr = document.createElement(\"tr\");\n        }\n      }\n      if (colAttrs.length === 0) {\n        tr = document.createElement(\"tr\");\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        colspan_header = rowAttrs.length;\n        if (n_medidas > 1) {\n          colspan_header++;\n        }\n        th.setAttribute(\"colspan\", colspan_header);\n        tr.appendChild(th);\n        th = document.createElement(\"th\");\n        th.innerHTML = \"Total\";\n        th.className = \"pvtTotalLabel pvtTotalCol\";\n        tr.appendChild(th);\n        thead.appendChild(tr);\n        result.appendChild(thead);\n      }\n      tbody = document.createElement(\"tbody\");\n      if (rowKeys.length === 0) {\n        ref1 = Object.keys(tmpAggregator.multivalue());\n        for (mc in ref1) {\n          m = ref1[mc];\n          tr = document.createElement(\"tr\");\n          th = document.createElement(\"th\");\n          th.textContent = m;\n          th.setAttribute(\"rowspan\", 1);\n          tr.appendChild(th);\n          for (j in colKeys) {\n            if (!hasProp.call(colKeys, j)) continue;\n            colKey = colKeys[j];\n            colKey = colKeys[j];\n            aggregator = pivotData.getAggregator([], colKey);\n            val = aggregator.multivalue();\n            td = document.createElement(\"td\");\n            td.className = \"pvtVal row\" + i + \" col\" + j;\n            td.textContent = aggregator.format(aggregator.multivalue()[m]);\n            td.setAttribute(\"data-value\", val);\n            tr.appendChild(td);\n          }\n          totalAggregator = pivotData.getAggregator([], []);\n          val = totalAggregator.multivalue();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(totalAggregator.multivalue()[m]);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"row\" + i);\n          tr.appendChild(td);\n          tbody.appendChild(tr);\n          result.appendChild(tbody);\n        }\n      }\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        tmpAggregator = pivotData.getAggregator([], []);\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x === 1) {\n            x = n_medidas;\n          } else {\n            if (x !== -1 && n_medidas > 1) {\n              x = x * n_medidas;\n            }\n          }\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 1);\n            }\n            tr.appendChild(th);\n          }\n        }\n        ref2 = Object.keys(tmpAggregator.multivalue());\n        for (mc in ref2) {\n          if (!hasProp.call(ref2, mc)) continue;\n          m = ref2[mc];\n          th = document.createElement(\"th\");\n          th.className = \"pvtRowLabel\";\n          th.textContent = m;\n          th.setAttribute(\"rowspan\", 1);\n          tr.appendChild(th);\n          for (j in colKeys) {\n            if (!hasProp.call(colKeys, j)) continue;\n            colKey = colKeys[j];\n            aggregator = pivotData.getAggregator(rowKey, colKey);\n            if (aggregator.multivalue) {\n              val = aggregator.format(aggregator.multivalue()[m]);\n              td = document.createElement(\"td\");\n              td.className = \"pvtVal row\" + i + \" col\" + j;\n              td.textContent = aggregator.format(val);\n              td.setAttribute(\"data-value\", val);\n              tr.appendChild(td);\n            } else {\n              val = aggregator.value();\n              td = document.createElement(\"td\");\n              td.className = \"pvtVal row\" + i + \" col\" + j;\n              td.textContent = aggregator.format(val);\n              td.setAttribute(\"data-value\", val);\n              tr.appendChild(td);\n            }\n          }\n          totalAggregator = pivotData.getAggregator(rowKey, []);\n          val = totalAggregator.multivalue();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(totalAggregator.multivalue()[m]);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"row\" + i);\n          tr.appendChild(td);\n          tbody.appendChild(tr);\n          result.appendChild(tbody);\n          if (mc < Object.keys(tmpAggregator.multivalue())[\"length\"] - 1) {\n            tr = document.createElement(\"tr\");\n          }\n        }\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      colspan_total = rowAttrs.length;\n      if (n_medidas >= 1) {\n        colspan_total++;\n      }\n      th.setAttribute(\"colspan\", colspan_total);\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        if (totalAggregator.multivalue) {\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          val = 0;\n          ref3 = Object.keys(totalAggregator.multivalue());\n          for (l = 0, len1 = ref3.length; l < len1; l++) {\n            m = ref3[l];\n            val += totalAggregator.multivalue()[m];\n          }\n          td.innerHTML = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        } else {\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        }\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = 0;\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      ref4 = Object.keys(totalAggregator.multivalue());\n      for (o = 0, len2 = ref4.length; o < len2; o++) {\n        m = ref4[o];\n        val += totalAggregator.multivalue()[m];\n      }\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Renderer for hierarchical table layout with multiple measures on the columns\n     */\n    multiColumnsTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, l, len1, len2, len3, len4, len5, len6, len7, len8, m, mc, n, n_medidas, o, q, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, result, rowAttrs, rowKey, rowKeys, s, spanSize, t, tbody, td, th, thead, tmpAggregator, totalAggregator, tr, txt, u, val, w, x, y;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, noDraw, o, ref1, ref2, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref1 = j; 0 <= ref1 ? l <= ref1 : l >= ref1; x = 0 <= ref1 ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = o = 0, ref2 = j; 0 <= ref2 ? o <= ref2 : o >= ref2; x = 0 <= ref2 ? ++o : --o) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      n_medidas = 1;\n      tmpAggregator = pivotData.getAggregator([], []);\n      if (tmpAggregator.multivalue) {\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length;\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtAxisLabel\";\n      th.setAttribute(\"colspan\", rowAttrs.length);\n      th.setAttribute(\"rowspan\", colAttrs.length + 1);\n      tr.appendChild(th);\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x === 1) {\n            x = n_medidas;\n          } else {\n            if (x !== -1 && n_medidas > 1) {\n              x = x * n_medidas;\n            }\n          }\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 1);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", 2);\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n        result.appendChild(thead);\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === colAttrs.length - 1) {\n          for (i in colKeys) {\n            if (!hasProp.call(colKeys, i)) continue;\n            colKey = colKeys[i];\n            ref1 = Object.keys(tmpAggregator.multivalue());\n            for (l = 0, len1 = ref1.length; l < len1; l++) {\n              m = ref1[l];\n              th = document.createElement(\"th\");\n              th.className = \"pvtColLabel\";\n              th.textContent = m;\n              th.setAttribute(\"colspan\", 1);\n              if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n                th.setAttribute(\"rowspan\", 1);\n              }\n              tr.appendChild(th);\n            }\n          }\n          thead.appendChild(tr);\n          result.appendChild(thead);\n        }\n      }\n      console.log(colAttrs);\n      if (colAttrs.length === 0) {\n        console.log(\"oi\");\n        tr = document.createElement(\"tr\");\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.setAttribute(\"colspan\", rowAttrs.length);\n        th.setAttribute(\"rowspan\", colAttrs.length + 1);\n        tr.appendChild(th);\n        ref2 = Object.keys(tmpAggregator.multivalue());\n        for (o = 0, len2 = ref2.length; o < len2; o++) {\n          m = ref2[o];\n          th = document.createElement(\"th\");\n          th.className = \"pvtColLabel\";\n          th.textContent = m;\n          th.setAttribute(\"colspan\", 1);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.innerHTML = \"Total\";\n        th.className = \"pvtTotalLabel pvtTotalCol\";\n        tr.appendChild(th);\n        thead.appendChild(tr);\n        result.appendChild(thead);\n      }\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 1);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          if (aggregator.multivalue) {\n            ref3 = Object.keys(aggregator.multivalue());\n            for (mc in ref3) {\n              if (!hasProp.call(ref3, mc)) continue;\n              m = ref3[mc];\n              td = document.createElement(\"td\");\n              td.className = \"pvtVal row\" + i + \" col\" + j;\n              td.innerHTML = aggregator.format(aggregator.multivalue()[m]);\n              td.setAttribute(\"data-value\", aggregator.format(aggregator.multivalue()[m]));\n              tr.appendChild(td);\n            }\n          } else {\n            for (q = 0, len3 = n_medidas.length; q < len3; q++) {\n              n = n_medidas[q];\n              val = aggregator.value();\n              td = document.createElement(\"td\");\n              td.className = \"pvtVal row\" + i + \" col\" + j;\n              td.textContent = aggregator.format(val);\n              td.setAttribute(\"data-value\", val);\n              tr.appendChild(td);\n            }\n          }\n        }\n        if (colAttrs.length === 0) {\n          aggregator = pivotData.getAggregator(rowKey, []);\n          ref4 = Object.keys(aggregator.multivalue());\n          for (s = 0, len4 = ref4.length; s < len4; s++) {\n            m = ref4[s];\n            td = document.createElement(\"td\");\n            td.className = \"pvtVal row\" + i + \" col\" + j;\n            td.innerHTML = aggregator.format(aggregator.multivalue()[m]);\n            td.setAttribute(\"data-value\", aggregator.multivalue()[m]);\n            tr.appendChild(td);\n          }\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = 0;\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        ref5 = Object.keys(totalAggregator.multivalue());\n        for (t = 0, len5 = ref5.length; t < len5; t++) {\n          m = ref5[t];\n          val += totalAggregator.multivalue()[m];\n        }\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n        result.appendChild(tbody);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length);\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.multivalue();\n        ref6 = Object.keys(val);\n        for (u = 0, len6 = ref6.length; u < len6; u++) {\n          m = ref6[u];\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal\";\n          td.innerHTML = totalAggregator.format(val[m]);\n          td.setAttribute(\"data-value\", val[m]);\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        }\n      }\n      if (colAttrs.length === 0) {\n        aggregator = pivotData.getAggregator([], []);\n        ref7 = Object.keys(aggregator.multivalue());\n        for (w = 0, len7 = ref7.length; w < len7; w++) {\n          m = ref7[w];\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.innerHTML = aggregator.format(aggregator.multivalue()[m]);\n          td.setAttribute(\"data-value\", aggregator.multivalue()[m]);\n          tr.appendChild(td);\n        }\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = 0;\n      ref8 = Object.keys(totalAggregator.multivalue());\n      for (y = 0, len8 = ref8.length; y < len8; y++) {\n        m = ref8[y];\n        val += totalAggregator.multivalue()[m];\n      }\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, opts) {\n      var defaults, e, pivotData, result, x;\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: function() {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer,\n        rendererOptions: null,\n        localeStrings: locales.en.localeStrings\n      };\n      opts = $.extend(defaults, opts);\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attrLength, axisValues, c, colList, defaults, e, existingOpts, fn, i, initialRender, k, l, len1, len2, len3, len4, o, opts, pivotTable, q, ref1, ref2, ref3, ref4, ref5, refresh, refreshDelayed, renderer, rendererControl, s, shownAttributes, tblCols, tr1, tr2, uiTable, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 200,\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        rendererOptions: {\n          localeStrings: locales[locale].localeStrings\n        },\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: function() {},\n        localeStrings: locales[locale].localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(defaults, inputOpts);\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        input = PivotData.convertToArray(input);\n        tblCols = (function() {\n          var ref1, results;\n          ref1 = input[0];\n          results = [];\n          for (k in ref1) {\n            if (!hasProp.call(ref1, k)) continue;\n            results.push(k);\n          }\n          return results;\n        })();\n        ref1 = opts.derivedAttributes;\n        for (c in ref1) {\n          if (!hasProp.call(ref1, c)) continue;\n          if ((indexOf.call(tblCols, c) < 0)) {\n            tblCols.push(c);\n          }\n        }\n        axisValues = {};\n        for (l = 0, len1 = tblCols.length; l < len1; l++) {\n          x = tblCols[l];\n          axisValues[x] = {};\n        }\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var base, results, v;\n          results = [];\n          for (k in record) {\n            if (!hasProp.call(record, k)) continue;\n            v = record[k];\n            if (!(opts.filter(record))) {\n              continue;\n            }\n            if (v == null) {\n              v = \"null\";\n            }\n            if ((base = axisValues[k])[v] == null) {\n              base[v] = 0;\n            }\n            results.push(axisValues[k][v]++);\n          }\n          return results;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref2 = opts.renderers;\n        for (x in ref2) {\n          if (!hasProp.call(ref2, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var len2, o, results;\n          results = [];\n          for (o = 0, len2 = tblCols.length; o < len2; o++) {\n            c = tblCols[o];\n            if (indexOf.call(opts.hiddenAttributes, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (o = 0, len2 = shownAttributes.length; o < len2; o++) {\n            a = shownAttributes[o];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          colList.addClass('pvtVertList');\n        } else {\n          colList.addClass('pvtHorizList');\n        }\n        fn = function(c) {\n          var attrElem, btns, checkContainer, filterItem, filterItemExcluded, hasExcludedItem, keys, len3, q, ref3, showFilterList, triangleLink, updateFilter, v, valueList;\n          keys = (function() {\n            var results;\n            results = [];\n            for (k in axisValues[c]) {\n              results.push(k);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").text(c + \" (\" + keys.length + \")\"));\n          if (keys.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            btns = $(\"<p>\").appendTo(valueList);\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", true);\n            }));\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", false);\n            }));\n            btns.append($(\"<br>\"));\n            btns.append($(\"<input>\", {\n              type: \"text\",\n              placeholder: opts.localeStrings.filterResults,\n              \"class\": \"pvtSearch\"\n            }).bind(\"keyup\", function() {\n              var filter;\n              filter = $(this).val().toLowerCase();\n              return valueList.find('.pvtCheckContainer p').each(function() {\n                var testString;\n                testString = $(this).text().toLowerCase().indexOf(filter);\n                if (testString !== -1) {\n                  return $(this).show();\n                } else {\n                  return $(this).hide();\n                }\n              });\n            }));\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref3 = keys.sort(getSort(opts.sorters, c));\n            for (q = 0, len3 = ref3.length; q < len3; q++) {\n              k = ref3[q];\n              v = axisValues[c][k];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[c], k) < 0);\n              } else if (opts.exclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[c], k) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [c, k]).appendTo(filterItem);\n              filterItem.append($(\"<span>\").text(k));\n              filterItem.append($(\"<span>\").text(\" (\" + v + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          updateFilter = function() {\n            var unselectedCount;\n            unselectedCount = valueList.find(\"[type='checkbox']\").length - valueList.find(\"[type='checkbox']:checked\").length;\n            if (unselectedCount > 0) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            if (keys.length > opts.menuLimit) {\n              return valueList.toggle();\n            } else {\n              return valueList.toggle(0, refresh);\n            }\n          };\n          $(\"<p>\").appendTo(valueList).append($(\"<button>\", {\n            type: \"button\"\n          }).text(\"OK\").bind(\"click\", updateFilter));\n          showFilterList = function(e) {\n            var clickLeft, clickTop, ref4;\n            ref4 = $(e.currentTarget).position(), clickLeft = ref4.left, clickTop = ref4.top;\n            valueList.css({\n              left: clickLeft + 10,\n              top: clickTop + 10\n            }).toggle();\n            valueList.find('.pvtSearch').val('');\n            return valueList.find('.pvtCheckContainer p').show();\n          };\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", showFilterList);\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          colList.append(attrElem).append(valueList);\n          return attrElem.bind(\"dblclick\", showFilterList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          c = shownAttributes[i];\n          fn(c);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref3 = opts.aggregators;\n        for (x in ref3) {\n          if (!hasProp.call(ref3, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(colList);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(colList));\n        }\n        this.html(uiTable);\n        ref4 = opts.cols;\n        for (q = 0, len3 = ref4.length; q < len3; q++) {\n          x = ref4[q];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref5 = opts.rows;\n        for (s = 0, len4 = ref5.length; s < len4; s++) {\n          x = ref5[s];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var attr, exclusions, inclusions, len5, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref6, ref7, subopts, t, u, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref6 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref6 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = t = 0, ref7 = numInputsToProcess; 0 <= ref7 ? t < ref7 : t > ref7; x = 0 <= ref7 ? ++t : --t) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (u = 0, len5 = shownAttributes.length; u < len5; u++) {\n                  attr = shownAttributes[u];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, ref8;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref8 = \"\" + record[k], indexOf.call(excludedItems, ref8) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(input, subopts);\n            pivotUIOptions = $.extend(opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    return $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, numCols, numRows, o, ref1, ref2, ref3;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref1 = opts.heatmap) != null ? ref1.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref2 = numRows; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = o = 0, ref3 = numCols; 0 <= ref3 ? o < ref3 : o > ref3; j = 0 <= ref3 ? ++o : --o) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"],"sourceRoot":"/source/"}